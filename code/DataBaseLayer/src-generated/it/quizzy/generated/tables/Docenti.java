/*
 * This file is generated by jOOQ.
 */
package it.quizzy.generated.tables;


import it.quizzy.generated.DefaultSchema;
import it.quizzy.generated.Keys;
import it.quizzy.generated.tables.Partite.PartitePath;
import it.quizzy.generated.tables.Quiz.QuizPath;
import it.quizzy.generated.tables.records.DocentiRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Docenti extends TableImpl<DocentiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>docenti</code>
     */
    public static final Docenti DOCENTI = new Docenti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocentiRecord> getRecordType() {
        return DocentiRecord.class;
    }

    /**
     * The column <code>docenti.id</code>.
     */
    public final TableField<DocentiRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>docenti.nome_completo</code>.
     */
    public final TableField<DocentiRecord, String> NOME_COMPLETO = createField(DSL.name("nome_completo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>docenti.email</code>.
     */
    public final TableField<DocentiRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>docenti.password_hash</code>.
     */
    public final TableField<DocentiRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.CLOB.nullable(false), this, "");

    private Docenti(Name alias, Table<DocentiRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Docenti(Name alias, Table<DocentiRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>docenti</code> table reference
     */
    public Docenti(String alias) {
        this(DSL.name(alias), DOCENTI);
    }

    /**
     * Create an aliased <code>docenti</code> table reference
     */
    public Docenti(Name alias) {
        this(alias, DOCENTI);
    }

    /**
     * Create a <code>docenti</code> table reference
     */
    public Docenti() {
        this(DSL.name("docenti"), null);
    }

    public <O extends Record> Docenti(Table<O> path, ForeignKey<O, DocentiRecord> childPath, InverseForeignKey<O, DocentiRecord> parentPath) {
        super(path, childPath, parentPath, DOCENTI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DocentiPath extends Docenti implements Path<DocentiRecord> {
        public <O extends Record> DocentiPath(Table<O> path, ForeignKey<O, DocentiRecord> childPath, InverseForeignKey<O, DocentiRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DocentiPath(Name alias, Table<DocentiRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DocentiPath as(String alias) {
            return new DocentiPath(DSL.name(alias), this);
        }

        @Override
        public DocentiPath as(Name alias) {
            return new DocentiPath(alias, this);
        }

        @Override
        public DocentiPath as(Table<?> alias) {
            return new DocentiPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DocentiRecord, Integer> getIdentity() {
        return (Identity<DocentiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocentiRecord> getPrimaryKey() {
        return Keys.DOCENTI__PK_DOCENTI;
    }

    private transient PartitePath _partite;

    /**
     * Get the implicit to-many join path to the <code>partite</code> table
     */
    public PartitePath partite() {
        if (_partite == null)
            _partite = new PartitePath(this, null, Keys.PARTITE__PARTITE_DOCENTI_FK.getInverseKey());

        return _partite;
    }

    private transient QuizPath _quiz;

    /**
     * Get the implicit to-many join path to the <code>quiz</code> table
     */
    public QuizPath quiz() {
        if (_quiz == null)
            _quiz = new QuizPath(this, null, Keys.QUIZ__QUIZ_DOCENTI_FK.getInverseKey());

        return _quiz;
    }

    @Override
    public Docenti as(String alias) {
        return new Docenti(DSL.name(alias), this);
    }

    @Override
    public Docenti as(Name alias) {
        return new Docenti(alias, this);
    }

    @Override
    public Docenti as(Table<?> alias) {
        return new Docenti(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Docenti rename(String name) {
        return new Docenti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Docenti rename(Name name) {
        return new Docenti(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Docenti rename(Table<?> name) {
        return new Docenti(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Docenti where(Condition condition) {
        return new Docenti(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Docenti where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Docenti where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Docenti where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Docenti where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Docenti where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Docenti where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Docenti where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Docenti whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Docenti whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
