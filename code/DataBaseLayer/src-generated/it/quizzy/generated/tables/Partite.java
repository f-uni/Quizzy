/*
 * This file is generated by jOOQ.
 */
package it.quizzy.generated.tables;


import it.quizzy.generated.DefaultSchema;
import it.quizzy.generated.Keys;
import it.quizzy.generated.tables.records.PartiteRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Partite extends TableImpl<PartiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>partite</code>
     */
    public static final Partite PARTITE = new Partite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartiteRecord> getRecordType() {
        return PartiteRecord.class;
    }

    /**
     * The column <code>partite.id</code>.
     */
    public final TableField<PartiteRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>partite.timestamp</code>.
     */
    public final TableField<PartiteRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>partite.id_docente</code>.
     */
    public final TableField<PartiteRecord, Integer> ID_DOCENTE = createField(DSL.name("id_docente"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>partite.id_quiz</code>.
     */
    public final TableField<PartiteRecord, Integer> ID_QUIZ = createField(DSL.name("id_quiz"), SQLDataType.INTEGER.nullable(false), this, "");

    private Partite(Name alias, Table<PartiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partite(Name alias, Table<PartiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>partite</code> table reference
     */
    public Partite(String alias) {
        this(DSL.name(alias), PARTITE);
    }

    /**
     * Create an aliased <code>partite</code> table reference
     */
    public Partite(Name alias) {
        this(alias, PARTITE);
    }

    /**
     * Create a <code>partite</code> table reference
     */
    public Partite() {
        this(DSL.name("partite"), null);
    }

    public <O extends Record> Partite(Table<O> child, ForeignKey<O, PartiteRecord> key) {
        super(child, key, PARTITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PartiteRecord, Integer> getIdentity() {
        return (Identity<PartiteRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PartiteRecord> getPrimaryKey() {
        return Keys.PARTITE__PK_PARTITE;
    }

    @Override
    public List<ForeignKey<PartiteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARTITE__PARTITE_DOCENTI_FK, Keys.PARTITE__PARTITE_QUIZ_FK);
    }

    private transient Docenti _docenti;
    private transient Quiz _quiz;

    /**
     * Get the implicit join path to the <code>docenti</code> table.
     */
    public Docenti docenti() {
        if (_docenti == null)
            _docenti = new Docenti(this, Keys.PARTITE__PARTITE_DOCENTI_FK);

        return _docenti;
    }

    /**
     * Get the implicit join path to the <code>quiz</code> table.
     */
    public Quiz quiz() {
        if (_quiz == null)
            _quiz = new Quiz(this, Keys.PARTITE__PARTITE_QUIZ_FK);

        return _quiz;
    }

    @Override
    public Partite as(String alias) {
        return new Partite(DSL.name(alias), this);
    }

    @Override
    public Partite as(Name alias) {
        return new Partite(alias, this);
    }

    @Override
    public Partite as(Table<?> alias) {
        return new Partite(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partite rename(String name) {
        return new Partite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partite rename(Name name) {
        return new Partite(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partite rename(Table<?> name) {
        return new Partite(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
