/*
 * This file is generated by jOOQ.
 */
package it.quizzy.generated.tables;


import it.quizzy.generated.DefaultSchema;
import it.quizzy.generated.Keys;
import it.quizzy.generated.tables.Docenti.DocentiPath;
import it.quizzy.generated.tables.Domande.DomandePath;
import it.quizzy.generated.tables.Partite.PartitePath;
import it.quizzy.generated.tables.records.QuizziesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quizzies extends TableImpl<QuizziesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quizzies</code>
     */
    public static final Quizzies QUIZZIES = new Quizzies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizziesRecord> getRecordType() {
        return QuizziesRecord.class;
    }

    /**
     * The column <code>quizzies.id</code>.
     */
    public final TableField<QuizziesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>quizzies.id_docente</code>.
     */
    public final TableField<QuizziesRecord, Integer> ID_DOCENTE = createField(DSL.name("id_docente"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>quizzies.titolo</code>.
     */
    public final TableField<QuizziesRecord, String> TITOLO = createField(DSL.name("titolo"), SQLDataType.CLOB.nullable(false), this, "");

    private Quizzies(Name alias, Table<QuizziesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Quizzies(Name alias, Table<QuizziesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>quizzies</code> table reference
     */
    public Quizzies(String alias) {
        this(DSL.name(alias), QUIZZIES);
    }

    /**
     * Create an aliased <code>quizzies</code> table reference
     */
    public Quizzies(Name alias) {
        this(alias, QUIZZIES);
    }

    /**
     * Create a <code>quizzies</code> table reference
     */
    public Quizzies() {
        this(DSL.name("quizzies"), null);
    }

    public <O extends Record> Quizzies(Table<O> path, ForeignKey<O, QuizziesRecord> childPath, InverseForeignKey<O, QuizziesRecord> parentPath) {
        super(path, childPath, parentPath, QUIZZIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QuizziesPath extends Quizzies implements Path<QuizziesRecord> {
        public <O extends Record> QuizziesPath(Table<O> path, ForeignKey<O, QuizziesRecord> childPath, InverseForeignKey<O, QuizziesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QuizziesPath(Name alias, Table<QuizziesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QuizziesPath as(String alias) {
            return new QuizziesPath(DSL.name(alias), this);
        }

        @Override
        public QuizziesPath as(Name alias) {
            return new QuizziesPath(alias, this);
        }

        @Override
        public QuizziesPath as(Table<?> alias) {
            return new QuizziesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<QuizziesRecord, Integer> getIdentity() {
        return (Identity<QuizziesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuizziesRecord> getPrimaryKey() {
        return Keys.QUIZZIES__PK_QUIZZIES;
    }

    @Override
    public List<ForeignKey<QuizziesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUIZZIES__QUIZ_DOCENTI_FK);
    }

    private transient DocentiPath _docenti;

    /**
     * Get the implicit join path to the <code>docenti</code> table.
     */
    public DocentiPath docenti() {
        if (_docenti == null)
            _docenti = new DocentiPath(this, Keys.QUIZZIES__QUIZ_DOCENTI_FK, null);

        return _docenti;
    }

    private transient DomandePath _domande;

    /**
     * Get the implicit to-many join path to the <code>domande</code> table
     */
    public DomandePath domande() {
        if (_domande == null)
            _domande = new DomandePath(this, null, Keys.DOMANDE__DOMANDE_QUIZ_FK.getInverseKey());

        return _domande;
    }

    private transient PartitePath _partite;

    /**
     * Get the implicit to-many join path to the <code>partite</code> table
     */
    public PartitePath partite() {
        if (_partite == null)
            _partite = new PartitePath(this, null, Keys.PARTITE__PARTITE_QUIZ_FK.getInverseKey());

        return _partite;
    }

    @Override
    public Quizzies as(String alias) {
        return new Quizzies(DSL.name(alias), this);
    }

    @Override
    public Quizzies as(Name alias) {
        return new Quizzies(alias, this);
    }

    @Override
    public Quizzies as(Table<?> alias) {
        return new Quizzies(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizzies rename(String name) {
        return new Quizzies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizzies rename(Name name) {
        return new Quizzies(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quizzies rename(Table<?> name) {
        return new Quizzies(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quizzies where(Condition condition) {
        return new Quizzies(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quizzies where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quizzies where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quizzies where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quizzies where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quizzies where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quizzies where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quizzies where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quizzies whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quizzies whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
