/*
 * This file is generated by jOOQ.
 */
package it.quizzy.generated.tables;


import it.quizzy.generated.DefaultSchema;
import it.quizzy.generated.Keys;
import it.quizzy.generated.tables.Partite.PartitePath;
import it.quizzy.generated.tables.records.UtentiRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Utenti extends TableImpl<UtentiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>utenti</code>
     */
    public static final Utenti UTENTI = new Utenti();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UtentiRecord> getRecordType() {
        return UtentiRecord.class;
    }

    /**
     * The column <code>utenti.id</code>.
     */
    public final TableField<UtentiRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>utenti.nickname</code>.
     */
    public final TableField<UtentiRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>utenti.punteggio</code>.
     */
    public final TableField<UtentiRecord, Integer> PUNTEGGIO = createField(DSL.name("punteggio"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>utenti.id_partita</code>.
     */
    public final TableField<UtentiRecord, Integer> ID_PARTITA = createField(DSL.name("id_partita"), SQLDataType.INTEGER.nullable(false), this, "");

    private Utenti(Name alias, Table<UtentiRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Utenti(Name alias, Table<UtentiRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>utenti</code> table reference
     */
    public Utenti(String alias) {
        this(DSL.name(alias), UTENTI);
    }

    /**
     * Create an aliased <code>utenti</code> table reference
     */
    public Utenti(Name alias) {
        this(alias, UTENTI);
    }

    /**
     * Create a <code>utenti</code> table reference
     */
    public Utenti() {
        this(DSL.name("utenti"), null);
    }

    public <O extends Record> Utenti(Table<O> path, ForeignKey<O, UtentiRecord> childPath, InverseForeignKey<O, UtentiRecord> parentPath) {
        super(path, childPath, parentPath, UTENTI);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UtentiPath extends Utenti implements Path<UtentiRecord> {
        public <O extends Record> UtentiPath(Table<O> path, ForeignKey<O, UtentiRecord> childPath, InverseForeignKey<O, UtentiRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UtentiPath(Name alias, Table<UtentiRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UtentiPath as(String alias) {
            return new UtentiPath(DSL.name(alias), this);
        }

        @Override
        public UtentiPath as(Name alias) {
            return new UtentiPath(alias, this);
        }

        @Override
        public UtentiPath as(Table<?> alias) {
            return new UtentiPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UtentiRecord, Integer> getIdentity() {
        return (Identity<UtentiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UtentiRecord> getPrimaryKey() {
        return Keys.UTENTI__PK_UTENTI;
    }

    @Override
    public List<ForeignKey<UtentiRecord, ?>> getReferences() {
        return Arrays.asList(Keys.UTENTI__UTENTI_PARTITE_FK);
    }

    private transient PartitePath _partite;

    /**
     * Get the implicit join path to the <code>partite</code> table.
     */
    public PartitePath partite() {
        if (_partite == null)
            _partite = new PartitePath(this, Keys.UTENTI__UTENTI_PARTITE_FK, null);

        return _partite;
    }

    @Override
    public Utenti as(String alias) {
        return new Utenti(DSL.name(alias), this);
    }

    @Override
    public Utenti as(Name alias) {
        return new Utenti(alias, this);
    }

    @Override
    public Utenti as(Table<?> alias) {
        return new Utenti(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Utenti rename(String name) {
        return new Utenti(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utenti rename(Name name) {
        return new Utenti(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Utenti rename(Table<?> name) {
        return new Utenti(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utenti where(Condition condition) {
        return new Utenti(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utenti where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utenti where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utenti where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utenti where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utenti where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utenti where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Utenti where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utenti whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Utenti whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
