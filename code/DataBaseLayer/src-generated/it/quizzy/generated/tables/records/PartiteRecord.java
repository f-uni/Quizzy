/*
 * This file is generated by jOOQ.
 */
package it.quizzy.generated.tables.records;


import it.quizzy.generated.tables.Partite;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartiteRecord extends UpdatableRecordImpl<PartiteRecord> implements Record4<Integer, LocalDateTime, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>partite.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>partite.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>partite.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>partite.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>partite.id_docente</code>.
     */
    public void setIdDocente(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>partite.id_docente</code>.
     */
    public Integer getIdDocente() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>partite.id_quiz</code>.
     */
    public void setIdQuiz(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>partite.id_quiz</code>.
     */
    public Integer getIdQuiz() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, LocalDateTime, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Partite.PARTITE.ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Partite.PARTITE.TIMESTAMP;
    }

    @Override
    public Field<Integer> field3() {
        return Partite.PARTITE.ID_DOCENTE;
    }

    @Override
    public Field<Integer> field4() {
        return Partite.PARTITE.ID_QUIZ;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDateTime component2() {
        return getTimestamp();
    }

    @Override
    public Integer component3() {
        return getIdDocente();
    }

    @Override
    public Integer component4() {
        return getIdQuiz();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDateTime value2() {
        return getTimestamp();
    }

    @Override
    public Integer value3() {
        return getIdDocente();
    }

    @Override
    public Integer value4() {
        return getIdQuiz();
    }

    @Override
    public PartiteRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PartiteRecord value2(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public PartiteRecord value3(Integer value) {
        setIdDocente(value);
        return this;
    }

    @Override
    public PartiteRecord value4(Integer value) {
        setIdQuiz(value);
        return this;
    }

    @Override
    public PartiteRecord values(Integer value1, LocalDateTime value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PartiteRecord
     */
    public PartiteRecord() {
        super(Partite.PARTITE);
    }

    /**
     * Create a detached, initialised PartiteRecord
     */
    public PartiteRecord(Integer id, LocalDateTime timestamp, Integer idDocente, Integer idQuiz) {
        super(Partite.PARTITE);

        setId(id);
        setTimestamp(timestamp);
        setIdDocente(idDocente);
        setIdQuiz(idQuiz);
        resetChangedOnNotNull();
    }
}
